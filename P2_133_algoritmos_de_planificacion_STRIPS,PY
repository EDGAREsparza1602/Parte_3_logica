import pyhop

# Definimos el estado inicial del problema
estado_inicial = {
    'en_mesa': ['A', 'C'],   # bloques en la mesa
    'sobre': [('B', 'A'), ('D', 'C')],  # bloques apilados: (bloque_superior, bloque_inferior)
    'mano_vacia': True  # mano vacía al principio
}

# Definimos el objetivo del problema
objetivo = {
    'sobre': [('B', 'C'), ('A', 'D')]  # queremos apilar B sobre C y A sobre D
}

# Definimos las acciones posibles para el agente
def mover_agarrar(estado, bloque):
    if estado['mano_vacia'] and bloque in estado['en_mesa']:
        nuevo_estado = estado.copy()
        nuevo_estado['mano_vacia'] = False
        nuevo_estado['en_mesa'].remove(bloque)
        return nuevo_estado, [('agarrar', bloque)]
    return False

def mover_soltar(estado, bloque):
    if not estado['mano_vacia']:
        nuevo_estado = estado.copy()
        nuevo_estado['mano_vacia'] = True
        nuevo_estado['en_mesa'].append(bloque)
        return nuevo_estado, [('soltar', bloque)]
    return False

def mover_apilar(estado, bloque_superior, bloque_inferior):
    if not estado['mano_vacia'] and bloque_superior in estado['en_mesa'] and bloque_inferior in estado['en_mesa']:
        nuevo_estado = estado.copy()
        nuevo_estado['mano_vacia'] = True
        nuevo_estado['en_mesa'].append(bloque_inferior)
        nuevo_estado['sobre'].append((bloque_superior, bloque_inferior))
        return nuevo_estado, [('apilar', bloque_superior, bloque_inferior)]
    return False

# Añadimos las acciones al planificador
pyhop.declare_operators(
    mover_agarrar,
    mover_soltar,
    mover_apilar
)

# Definimos los métodos posibles para resolver el objetivo
def mover_apilar_todos(estado, objetivo):
    acciones = []
    for b1, b2 in objetivo['sobre']:
        if (b1, b2) not in estado['sobre']:
            acciones.append(('agarrar', b1))  # Primero agarramos b1
            acciones.append(('apilar', b1, b2))  # Luego apilamos b1 sobre b2
            acciones.append(('soltar', b1))  # Finalmente soltamos b1
    return acciones

# Añadimos el método al planificador
pyhop.declare_methods('mover_todos', mover_apilar_todos)

# Resolvemos el problema
plan = pyhop.pyhop(estado_inicial, [('mover_todos', objetivo)], verbose=3)

# Imprimimos el plan encontrado
print("Plan encontrado:")
for accion in plan:
    print(accion)
